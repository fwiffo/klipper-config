# These macros are required for Fluidd to correctly function.
# You can copy these entries into your printer.cfg.
#
# Alternatively, import this file by adding
# this line into your printer.cfg;
#
# [include client_macros.cfg]

[respond]

# -----------------------------------------------------------
# Pre-defined colors and messages for various LED states
# -----------------------------------------------------------
[gcode_macro _LED_IDLE]
description: Sets LED to indicate an idle state.
gcode:
  {% set led = printer.configfile.settings["neopixel displaystatus"] %}
  M117
  SET_LED LED=displayStatus RED={led.initial_red} GREEN={led.initial_green} BLUE={led.initial_blue}

[gcode_macro _LED_WARMUP1]
description: Sets LED and status to indicate bed heating.
gcode:
  M117 Heating...
  RESPOND PREFIX="Print:" MSG="Bed heating..."
  SET_LED LED=displayStatus RED=0.04 GREEN=0.02 BLUE=0.00

[gcode_macro _LED_HEAT_SOAK]
description: Sets LED and status to indicate heat soak.
gcode:
  M117 Heat soak...
  SET_LED LED=displayStatus RED=0.08 GREEN=0.04 BLUE=0.00

[gcode_macro _LED_WARMUP2]
description: Sets LED and status to indicate extruder heating.
gcode:
  M117 Heating...
  RESPOND PREFIX="Print:" MSG="Extruder heating..."
  SET_LED LED=displayStatus RED=0.12 GREEN=0.06 BLUE=0.00

[gcode_macro _LED_READY]
description: Sets LED and status to indicate print start.
gcode:
  M117 Starting...
  RESPOND PREFIX="Print:" MSG="Starting..."
  SET_LED LED=displayStatus RED=0.16 GREEN=0.08 BLUE=0.00

[gcode_macro _LED_PAUSED]
description: Sets LED and status to indicate paused state.
gcode:
  M117 Paused.
  SET_LED LED=displayStatus RED=0.08 GREEN=0.08 BLUE=0.00

[gcode_macro _LED_PRINTING]
description: Sets LED for printing.
gcode:
  M117
  SET_LED LED=displayStatus RED=0.00 GREEN=0.12 BLUE=0.00

[gcode_macro _LED_ERROR]
description: Sets LED to indicate an error.
gcode:
  SET_LED LED=displayStatus RED=0.20 GREEN=0.00 BLUE=0.02

# -----------------------------------------------------------
# Quality of life macros.
# -----------------------------------------------------------
[gcode_macro _HOME_IF_NOT_HOMED]
description: Homes the toolhead only if it's not already homed.
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

[gcode_macro CENTER_PRINTHEAD]
description: Moves the toolhead 20mm above the center of the bed.
gcode:
  _HOME_IF_NOT_HOMED
  # Calculate bed center.
  {% set max_x = printer.configfile.settings.stepper_x.position_max|float %}
  {% set max_y = printer.configfile.settings.stepper_y.position_max|float %}
  {% set x_park = max_x / 2 %}
  {% set y_park = max_y / 2 %}
  {% set speed = params.SPEED|default(6000)|float %}

  G0 X{x_park} Y{y_park} Z20 F{speed}

[gcode_macro PARK_USEFULLY]
description: Parks the toolhead at the rear of the bed.
gcode:
  M400
  {% set previous_message = printer.display_status.message %}
  M117 Parking...
  _HOME_IF_NOT_HOMED
  # Calculate a position at the center-rear of the bed.
  {% set max_x = printer.configfile.settings.stepper_x.position_max|float %}
  {% set max_y = printer.configfile.settings.stepper_y.position_max|float %}
  {% set max_z = printer.configfile.settings.stepper_z.position_max|float %}
  {% set x_park = max_x / 2 %}
  {% set z_park = [max_z, printer.toolhead.position.z + 40] | min %}
  {% set speed = params.SPEED|default(6000)|float %}

  G0 X{x_park} Y{max_y} Z{z_park} F{speed}
  M400
  M117 {previous_message if previous_message else ''}

[gcode_macro _SET_FAN_SPEED_IF_EXISTS]
description: Sets the speed of a fan only if the fan exists, does nothing otherwise.
gcode:
  {% if "fan_generic " + params.FAN in printer %}
    SET_FAN_SPEED FAN={ params.FAN } SPEED={ params.SPEED }
  {% endif %}

[gcode_macro _RESTORE_SETTINGS]
description: Restores pressure advance and velocity limits to the values specified in the Klipper config.
gcode:
  # Restore various parameters to their original configured values; alternative
  # values are set for specific prints/filaments at the start of printing.
  {% set s = printer.configfile.settings.extruder %}
  SET_PRESSURE_ADVANCE ADVANCE={s.pressure_advance}
  {% set s = printer.configfile.settings.printer %}
  SET_VELOCITY_LIMIT VELOCITY={s.max_velocity} ACCEL={s.max_accel} ACCEL_TO_DECEL={s.max_accel_to_decel} SQUARE_CORNER_VELOCITY={s.square_corner_velocity}
  UPDATE_DELAYED_GCODE ID=return_to_idle DURATION=300
  UPDATE_DELAYED_GCODE ID=turn_off_nevermore DURATION=300

[gcode_macro NEVERMORE]
description: Sets the fan speed for the Nevermore air filter.
gcode:
  UPDATE_DELAYED_GCODE ID=turn_off_nevermore DURATION=0
  ; Disable temporarily until I can fix the rattle, the carbon is
  ; used up anyway
  ; _SET_FAN_SPEED_IF_EXISTS FAN=nevermore SPEED={ params.SPEED|default(0)|float }

# -----------------------------------------------------------
# Main printing macros
# -----------------------------------------------------------
[gcode_macro PRINT_START]
description: Slicer starting script.
gcode:
  # Check for required parameters.
  {% if not params.TEMP or not params.BED_TEMP %}
    CANCEL_PRINT MSG="TEMP and BED_TEMP parameters are required for PRINT_START."
  {% endif %}

  UPDATE_DELAYED_GCODE ID=return_to_idle DURATION=0

  _LED_WARMUP1
  # Set bed temperature, but continue.
  M140 S{ params.BED_TEMP }
  CENTER_PRINTHEAD SPEED=18000

  # Wait until the bed is nearly warmed up.
  {% set preheat_bed_temp = params.BED_TEMP|float - 10 %}
  TEMPERATURE_WAIT sensor=heater_bed minimum={ preheat_bed_temp }

  # Dwell for heat soak, if requested.
  _HEAT_SOAK

  {% set filament_type = params.FILAMENT|default('') %}
  {% if filament_type in ('ABS', 'ASA') %}
    NEVERMORE SPEED=0.8
  {% elif filament_type in ('NYLON', 'PA') %}
    NEVERMORE SPEED=0.6
  {% elif filament_type == 'PC' %}
    NEVERMORE SPEED=0.6
  {% elif filament_type == 'PVB' %}
    NEVERMORE SPEED=0.5
  {% elif filament_type == 'PET' %}
    NEVERMORE SPEED=0.4
  {% endif %}

  # Set the hotend temperature and wait for bed and hotend to fully heat up.
  _LED_WARMUP2
  M109 S{ params.TEMP }
  M190 S{ params.BED_TEMP }

  _LED_READY
  {% if params.SKIP_HOME %}
    # Skip homing if possible - assumes things were homed hot. Useful for
    # printing multi-colored parts as sequential prints.
    _HOME_IF_NOT_HOMED
  {% else %}
    # Re-home after warmup to account for expansion.
    G28
  {% endif %}

  # Purge line.
  G0 Y0 X35 Z0.2 F18000
  G92 E0.0
  G1 X80 E14.0 F500.0
  G92 E0.0

  # Hop before printing.
  G0 Z1.0
  _LED_PRINTING

[gcode_macro SET_HEAT_SOAK]
description: Requests a heat soak to wait for a chamber temperature, or a time in minutes (or both).
gcode:
  SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_start VALUE=0

  {% set soak_time = params.TIME|default(0)|int %}
  {% set soak_temp = params.TEMP|default(0)|int %}

  {% if soak_temp > 0 and "temperature_sensor chamber" not in printer %}
    { action_raise_error("No chamber temperature sensor present for heat soak.") }
  {% endif %}

  SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_time VALUE={ soak_time }
  SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_temp VALUE={ soak_temp }

  {% if soak_time > 0 and soak_temp > 0 %}
    { action_respond_info("%d minute and %d degree heat soak requested." % (soak_time, soak_temp)) }
  {% elif soak_time > 0 %}
    { action_respond_info("%d minute heat soak requested." % soak_time) }"
  {% elif soak_temp > 0 %}
    { action_respond_info("%d degree heat soak requested." % soak_temp) }"
  {% else %}
    { action_respond_info("Heat soak canceled.") }
  {% endif %}

  {% if not soak_time and not soak_temp %}
    M117
  {% else %}
    M117 Heat soak req.
  {% endif %}

[gcode_macro _HEAT_SOAK]
# Note: It's important to have a separate macro for this since status variables
# are evaluated when the macro is evaluated, not when it's executed. In other
# words, printer.idle_timeout.printing_time doesn't actually change over the
# course of a macro, and moving this code directly into PRINT_START would change
# the behavior. The soak_time and soak_start variables are used to display the
# heat soak time requested/remaining, and would show the wrong time if the code
# was moved.
description: Waits the requested amount of time for a heat soak, or until the requested temperature (or both).
variable_soak_time: 0
variable_soak_temp: 0
variable_soak_start: 0
gcode:
  {% set heat_soak = printer["gcode_macro _HEAT_SOAK"] %}
  {% if heat_soak.soak_time > 0 or heat_soak.soak_temp > 0 %}
    M400
    _LED_HEAT_SOAK
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_start VALUE={ printer.idle_timeout.printing_time }
    {% if heat_soak.soak_time > 0 %}
      RESPOND PREFIX="Heat soak:" MSG="Waiting {heat_soak.soak_time} minutes..."
      G4 P{ heat_soak.soak_time * 1000 * 60 }
    {% endif %}
    {% if heat_soak.soak_temp > 0 and "temperature_sensor chamber" in printer %}
      RESPOND PREFIX="Heat soak:" MSG="Waiting for chamber temp of {heat_soak.soak_temp} degrees..."
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={heat_soak.soak_temp}
    {% endif %}
    M400
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_start VALUE=0
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_time VALUE=0
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_temp VALUE=0
    RESPOND PREFIX="Heat soak:" MSG="Ready!"
  {% endif %}

[gcode_macro PRINT_END]
description: Slicer end script.
variable_last_printing_time: 0
gcode:
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=last_printing_time VALUE={ printer.idle_timeout.printing_time }

  M400                           ; Wait for buffer to clear
  M117 Done.
  RESPOND PREFIX="Print:" MSG="Done."
  G92 E0                         ; Zero the extruder
  G1 E-6.0 F3600                 ; Retract filament

  # Get Boundaries.
  {% set max_x = printer.configfile.settings.stepper_x.position_max|float %}
  {% set max_y = printer.configfile.settings.stepper_y.position_max|float %}
  {% set max_z = printer.configfile.settings.stepper_z.position_max|float %}

  # Check end position to determine safe direction to move.
  {% if printer.toolhead.position.x < (max_x - 20) %}
    {% set x_safe = 20.0 %}
  {% else %}
    {% set x_safe = -20.0 %}
  {% endif %}

  {% if printer.toolhead.position.y < (max_y - 20) %}
    {% set y_safe = 20.0 %}
  {% else %}
    {% set y_safe = -20.0 %}
  {% endif %}

  {% if printer.toolhead.position.z < (max_z - 0.4) %}
    {% set z_safe = 0.4 %}
  {% else %}
    {% set z_safe = max_z - printer.toolhead.position.z %}
  {% endif %}

  G91                            ; Relative positioning
  G0 Z{z_safe} F3600             ; Move nozzle up
  G0 X{x_safe} Y{y_safe} F20000  ; Jerk nozzle to remove stringing
  G90                            ; Absolute positioning

  # Option to keep heaters on. Useful for print multi-color parts
  # with sequential prints.
  {% if not params.STAY_HOT %}
    TURN_OFF_HEATERS
    M107                         ; Turn off part cooling fan
  {% endif %}

  PARK_USEFULLY SPEED=18000
  _RESTORE_SETTINGS
  _LED_IDLE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# Change this if you need more or less extrusion during pause.
variable_extrude: 1.0
gcode:
  # Calculate safe lift position.
  {% set max_z = printer.configfile.settings.stepper_z.position_max|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}

  _LED_PAUSED
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  PARK_USEFULLY SPEED=18000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  M117 Resuming...
  G91
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME
  _LED_PRINTING

[delayed_gcode return_to_idle]
gcode:
  _LED_IDLE

[delayed_gcode turn_off_nevermore]
gcode:
  _SET_FAN_SPEED_IF_EXISTS FAN=nevermore SPEED=0.0

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  {% set msg = params.MSG|default("Canceled") %}
  M117 {msg}
  _LED_ERROR
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT

  G92 E0                         ; Zero the extruder
  G1 E-2.0 F3600                 ; Retract filament
  PARK_USEFULLY
  M18                            ; Turn off steppers
  M106 S0                        ; Turn off part fans
  _RESTORE_SETTINGS

[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament. Must preheat first. Remove filament right away to avoid getting stuck.
gcode:
  M83                            ; Set extruder to relative
  G1 E5 F300                     ; Extrude a little to soften tip
  G1 E-70 F1800                  ; Retract filament completely
  M82                            ; Set extruder to absolute

[gcode_macro LOAD_FILAMENT]
description: Loads filament. Must preheat first.
gcode:
  M83                            ; Set extruder to relative
  G1 E20 F1000                   ; Take in the first bit quickly
  G1 E170 F300                   ; Extrude some filament to purge the previous
  M82                            ; Set extruder to absolute

# According to the Klipper documentation, as well as the naming, "max_accel"
# and "SET_VELOCITY_LIMIT" should set a maximum/limit for acceleration. It
# actually just sets a default. If a slicer emits M204 to set the acceleration
# for the next move, max_accel is not respected (M204 apparently is just an
# alias for SET_VELOCITY_LIMIT?) This macro fixes the behavior to match the
# documentation so that it's actually useful.
[gcode_macro M204]
description: Implements max_accel as an actual maximum instead of a default.
rename_existing: M204.1
variable_runtime_max_accel: 0
gcode:
  {% set runtime_max_accel = printer["gcode_macro M204"].runtime_max_accel %}
  {% if runtime_max_accel %}
    {% set max_accel = runtime_max_accel %}
  {% else %}
    {% set max_accel = printer.configfile.settings.printer.max_accel %}
  {% endif %}

  {% set P = [params.P|default(0)|float, max_accel]|min %}
  {% set T = [params.T|default(0)|float, max_accel]|min %}
  {% set S = [params.S|default(0)|float, max_accel]|min %}

  ; Note: Doesn't support R (retract acceleration)
  {% if P and T %}
    M204.1 P{P} T{T}
  {% elif P %}
    M204.1 P{P}
  {% elif T %}
    M204.1 T{T}
  {% elif S %}
    M204.1 S{S}
  {% else %}
    M204.1 {rawparams}
  {% endif %}

[gcode_macro SET_VELOCITY_LIMIT]
description: Implements SET_VELOCITY_LIMIT ACCEL... as an actual limit.
rename_existing: BASE_SET_VELOCITY_LIMIT
gcode:
  {% if params.ACCEL %}
    SET_GCODE_VARIABLE MACRO=M204 VARIABLE=runtime_max_accel VALUE={params.ACCEL}
  {% endif %}
  BASE_SET_VELOCITY_LIMIT {rawparams}

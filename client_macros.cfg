# These macros are required for Fluidd to correctly function.
# You can copy these entries into your printer.cfg.
#
# Alternatively, import this file by adding
# this line into your printer.cfg;
#
# [include client_macros.cfg]

[respond]

# -----------------------------------------------------------
# Quality of life macros.
# -----------------------------------------------------------
[gcode_macro _HOME_IF_NOT_HOMED]
description: Homes the toolhead only if it's not already homed.
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

[gcode_macro CENTER]
description: Moves the toolhead 20mm above the center of the bed.
gcode:
  SAVE_GCODE_STATE NAME=CENTER
  _HOME_IF_NOT_HOMED
  # Calculate bed center.
  {% set max_x = printer.configfile.settings.stepper_x.position_max|float %}
  {% set max_y = printer.configfile.settings.stepper_y.position_max|float %}
  {% set x_mid = max_x / 2 %}
  {% set y_mid = max_y / 2 %}

  G90                            ; Absolute positioning
  G0 X{x_mid} Y{y_mid} Z20 F18000
  RESTORE_GCODE_STATE NAME=CENTER

[gcode_macro PARK]
description: Parks the toolhead at the rear of the bed.
gcode:
  SAVE_GCODE_STATE NAME=PARK
  M400
  {% set previous_message = printer.display_status.message %}
  M117 Parking...
  _HOME_IF_NOT_HOMED
  # Calculate a position at the center-rear of the bed.
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set x_park = max_x / 2 %}
  {% set z_park = [max_z - 0.1 , printer.toolhead.position.z + 40] | min %}

  G90                            ; Absolute positioning
  G0 X{x_park} Y{max_y} Z{z_park} F6000
  M400
  M117 {previous_message if previous_message else ''}
  RESTORE_GCODE_STATE NAME=PARK

[gcode_macro _SET_FAN_SPEED_IF_EXISTS]
description: Sets the speed of a fan only if the fan exists, does nothing otherwise.
gcode:
  {% if "fan_generic " + params.FAN in printer %}
    SET_FAN_SPEED FAN={ params.FAN } SPEED={ params.SPEED }
  {% endif %}

[gcode_macro _RESTORE_SETTINGS]
description: Restores pressure advance and velocity limits to the values specified in the Klipper config.
gcode:
  # Restore various parameters to their original configured values; alternative
  # values are set for specific prints/filaments at the start of printing.
  {% set s = printer.configfile.settings.extruder %}
  SET_PRESSURE_ADVANCE ADVANCE={s.pressure_advance}
  {% set s = printer.configfile.settings.printer %}
  SET_VELOCITY_LIMIT VELOCITY={s.max_velocity} ACCEL={s.max_accel} SQUARE_CORNER_VELOCITY={s.square_corner_velocity}
  {% if 'temperature_fan electronics' in printer %}
    {% set s = printer.configfile.settings['temperature_fan electronics'] %}
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=electronics TARGET={s['target_temp']}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=return_to_idle DURATION=600
  UPDATE_DELAYED_GCODE ID=turn_off_nevermore DURATION=300

[gcode_macro NEVERMORE]
description: Sets the fan speed for the Nevermore air filter.
gcode:
  UPDATE_DELAYED_GCODE ID=turn_off_nevermore DURATION=0
  ; Disable temporarily until I can fix the rattle, the carbon is
  ; used up anyway
  ; _SET_FAN_SPEED_IF_EXISTS FAN=nevermore SPEED={ params.SPEED|default(0)|float }

[gcode_macro _STEPWISE_TEMPERATURE_WAIT]
description: Allow interruption during warmup and set LED colors.
gcode:
  {% set wait_temp = params.MINIMUM|int %}
  {% set alt_temp = params.ALT|default(0)|int %}
  {% set brightness = printer["gcode_macro _CUSTOM_CONFIG"].warmup_brightness %}
  {% for min_step in range(20, wait_temp, 5) %}
    TEMPERATURE_WAIT SENSOR={params.SENSOR} MINIMUM={min_step}
    SET_COLOR_TEMP TEMP={15*[min_step,alt_temp]|max} BRIGHTNESS={brightness}
  {% endfor %}
  TEMPERATURE_WAIT SENSOR={params.SENSOR} MINIMUM={wait_temp}
  SET_COLOR_TEMP TEMP={15*[wait_temp,alt_temp]|max} BRIGHTNESS={brightness}

# -----------------------------------------------------------
# Main printing macros
# -----------------------------------------------------------
[gcode_macro PRINT_START]
description: Slicer starting script.
gcode:
  # Check for required parameters.
  {% if not params.TEMP or not params.BED_TEMP %}
    CANCEL_PRINT MSG="TEMP and BED_TEMP parameters are required for PRINT_START."
  {% endif %}

  UPDATE_DELAYED_GCODE ID=return_to_idle DURATION=0

  M117 Heating...
  RESPOND PREFIX="Print:" MSG="Bed heating..."
  M140 S{ params.BED_TEMP }
  {% set brightness = printer["gcode_macro _CUSTOM_CONFIG"].warmup_brightness %}
  SET_COLOR_TEMP TEMP={15*printer.heater_bed.temperature} BRIGHTNESS={brightness}

  # Set any electronics fans to a low threshold so that they're always on during
  # printing to avoid temperature cycling.
  {% if 'temperature_fan electronics' in printer %}
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=electronics TARGET=20
  {% endif %}
  # Set bed temperature, but continue.
  CENTER

  # Wait until the bed is nearly warmed up.
  {% set preheat_bed_temp = params.BED_TEMP|float - 10 %}
  _STEPWISE_TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={preheat_bed_temp}

  # Dwell for heat soak, if requested.
  _HEAT_SOAK

  {% set filament_type = params.FILAMENT|default('') %}
  {% if filament_type in ('ABS', 'ASA') %}
    NEVERMORE SPEED=0.8
  {% elif filament_type in ('NYLON', 'PA') %}
    NEVERMORE SPEED=0.6
  {% elif filament_type == 'PC' %}
    NEVERMORE SPEED=0.6
  {% elif filament_type == 'PVB' %}
    NEVERMORE SPEED=0.5
  {% elif filament_type == 'PET' %}
    NEVERMORE SPEED=0.4
  {% endif %}

  # Set the hotend temperature and wait for bed and hotend to fully heat up.
  M117 Heating...
  RESPOND PREFIX="Print:" MSG="Extruder heating..."
  M104 S{ params.TEMP }
  _STEPWISE_TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP} ALT={params.BED_TEMP}
  M190 S{ params.BED_TEMP }
  M109 S{ params.TEMP }

  {% if filament_type == 'PLA' %}
    {% set wait_time = printer["gcode_macro _CUSTOM_CONFIG"].pla_stabilize_time %}
  {% else %}
    {% set wait_time = printer["gcode_macro _CUSTOM_CONFIG"].default_stabilize_time %}
  {% endif %}
  M117 Stabilizing...
  RESPOND PREFIX="Print:" MSG="Letting temperatures stabilize..."
  G4 P{wait_time*60*1000}  ; Wait some time to stabilize

  M117 Starting...
  RESPOND PREFIX="Print:" MSG="Starting print..."
  {% if params.SKIP_HOME %}
    # Skip homing if possible - assumes things were homed hot. Useful for
    # printing multi-colored parts as sequential prints.
    _HOME_IF_NOT_HOMED
  {% else %}
    # Re-home after warmup to account for expansion.
    _LEVEL_AT_PRINT_START
  {% endif %}

  # Purge line.
  G0 Y0 X20 Z0.2 F18000
  G92 E0.0
  G1 X105 E25.0 F500.0
  G92 E0.0

  # Hop before printing.
  G0 Z1.0
  _MSG_PRINTING

[gcode_macro SET_HEAT_SOAK]
description: Requests a heat soak to wait for a chamber temperature, or a time in minutes (or both).
gcode:
  SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_start VALUE=0

  {% set soak_time = params.TIME|default(0)|int %}
  {% set soak_temp = params.TEMP|default(0)|int %}

  {% if soak_temp > 0 and "temperature_sensor chamber" not in printer %}
    { action_raise_error("No chamber temperature sensor present for heat soak.") }
  {% endif %}

  SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_time VALUE={ soak_time }
  SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_temp VALUE={ soak_temp }

  {% if soak_time > 0 and soak_temp > 0 %}
    { action_respond_info("%d minute and %d degree heat soak requested." % (soak_time, soak_temp)) }
  {% elif soak_time > 0 %}
    { action_respond_info("%d minute heat soak requested." % soak_time) }
  {% elif soak_temp > 0 %}
    { action_respond_info("%d degree heat soak requested." % soak_temp) }
  {% else %}
    { action_respond_info("Heat soak canceled.") }
  {% endif %}

  {% if not soak_time and not soak_temp %}
    M117
  {% else %}
    M117 Heat soak req.
  {% endif %}

[gcode_macro _HEAT_SOAK]
# Note: It's important to have a separate macro for this since status variables
# are evaluated when the macro is evaluated, not when it's executed. In other
# words, printer.idle_timeout.printing_time doesn't actually change over the
# course of a macro, and moving this code directly into PRINT_START would change
# the behavior. The soak_time and soak_start variables are used to display the
# heat soak time requested/remaining, and would show the wrong time if the code
# was moved.
description: Waits the requested amount of time for a heat soak, or until the requested temperature (or both).
variable_soak_time: 0
variable_soak_temp: 0
variable_soak_start: 0
gcode:
  {% set heat_soak = printer["gcode_macro _HEAT_SOAK"] %}
  {% if heat_soak.soak_time > 0 or heat_soak.soak_temp > 0 %}
    M400
    M117 Heat soak...
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_start VALUE={ printer.idle_timeout.printing_time }
    {% if heat_soak.soak_time > 0 %}
      RESPOND PREFIX="Heat soak:" MSG="Waiting {heat_soak.soak_time} minutes..."
      G4 P{ heat_soak.soak_time * 1000 * 60 }
    {% endif %}
    {% if heat_soak.soak_temp > 0 and "temperature_sensor chamber" in printer %}
      RESPOND PREFIX="Heat soak:" MSG="Waiting for chamber temp of {heat_soak.soak_temp} degrees..."
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={heat_soak.soak_temp}
    {% endif %}
    M400
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_start VALUE=0
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_time VALUE=0
    SET_GCODE_VARIABLE MACRO=_HEAT_SOAK VARIABLE=soak_temp VALUE=0
    RESPOND PREFIX="Heat soak:" MSG="Ready!"
  {% endif %}

[gcode_macro PRINT_END]
description: Slicer end script.
variable_last_printing_time: 0
gcode:
  SAVE_GCODE_STATE NAME=PRINT_END
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=last_printing_time VALUE={ printer.idle_timeout.printing_time }

  M400                           ; Wait for buffer to clear
  M117 Done.
  RESPOND PREFIX="Print:" MSG="Done."
  G92 E0                         ; Zero the extruder
  G1 E-12.0 F1800                ; Retract filament a bit to avoid danglies

  # Get Boundaries.
  {% set max_x = printer.configfile.settings.stepper_x.position_max|float %}
  {% set max_y = printer.configfile.settings.stepper_y.position_max|float %}
  {% set max_z = printer.configfile.settings.stepper_z.position_max|float %}

  # Check end position to determine safe direction to move.
  {% if printer.toolhead.position.x < (max_x - 20) %}
    {% set x_safe = 20.0 %}
  {% else %}
    {% set x_safe = -20.0 %}
  {% endif %}

  {% if printer.toolhead.position.y < (max_y - 20) %}
    {% set y_safe = 20.0 %}
  {% else %}
    {% set y_safe = -20.0 %}
  {% endif %}

  {% if printer.toolhead.position.z < (max_z - 0.4) %}
    {% set z_safe = 0.4 %}
  {% else %}
    {% set z_safe = max_z - printer.toolhead.position.z %}
  {% endif %}

  G91                            ; Relative positioning
  G0 Z{z_safe} F3600             ; Move nozzle up
  G0 X{x_safe} Y{y_safe} F20000  ; Jerk nozzle to remove stringing

  # Option to keep heaters on. Useful for print multi-color parts
  # with sequential prints.
  {% if not params.STAY_HOT %}
    TURN_OFF_HEATERS
    M107                         ; Turn off part cooling fan
  {% endif %}

  PARK
  _RESTORE_SETTINGS
  _MSG_IDLE
  RESTORE_GCODE_STATE NAME=PRINT_END

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# Change this if you need more or less extrusion during pause.
variable_extrude: 1.0
gcode:
  # Calculate safe lift position.
  {% set max_z = printer.configfile.settings.stepper_z.position_max|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}

  _MSG_PAUSED
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  PARK

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  M117 Resuming...
  G91
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME
  _MSG_PRINTING

[delayed_gcode return_to_idle]
gcode:
  {% if "output_pin caselight" in printer %}
    SET_PIN PIN=caselight VALUE=0.0
  {% endif %}
  _MSG_IDLE

[delayed_gcode turn_off_nevermore]
gcode:
  _SET_FAN_SPEED_IF_EXISTS FAN=nevermore SPEED=0.0

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  {% set msg = params.MSG|default("Canceled") %}
  M117 {msg}
  _MSG_ERROR
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  BASE_CANCEL_PRINT

  G92 E0                         ; Zero the extruder
  G1 E-12.0 F1800                ; Retract filament
  PARK
  M18                            ; Turn off steppers
  M106 S0                        ; Turn off part fans
  _RESTORE_SETTINGS

[gcode_macro UNLOAD]
description: Unloads filament. Must preheat first. Remove filament right away to avoid getting stuck.
gcode:
  SAVE_GCODE_STATE NAME=FILAMENT_UNLOAD
  {% set dist = printer["gcode_macro _CUSTOM_CONFIG"].unload_filament_distance %}
  M83                            ; Set extruder to relative
  G1 E5 F300                     ; Extrude a little to soften tip
  G1 E{dist} F1800               ; Retract filament completely
  RESTORE_GCODE_STATE NAME=FILAMENT_UNLOAD

[gcode_macro LOAD]
description: Loads filament. Must preheat first.
gcode:
  SAVE_GCODE_STATE NAME=FILAMENT_LOAD
  {% set dist = printer["gcode_macro _CUSTOM_CONFIG"].load_filament_distance %}
  M83                            ; Set extruder to relative
  G1 E20 F1000                   ; Take in the first bit quickly
  G1 E{dist} F300                ; Extrude some filament to purge the previous
  G1 E-12.0 F1800                ; Retract filament a bit to avoid danglies
  RESTORE_GCODE_STATE NAME=FILAMENT_LOAD

# According to the Klipper documentation, as well as the naming, "max_accel"
# and "SET_VELOCITY_LIMIT" should set a maximum/limit for acceleration. It
# actually just sets a default. If a slicer emits M204 to set the acceleration
# for the next move, max_accel is not respected (M204 apparently is just an
# alias for SET_VELOCITY_LIMIT?) This macro fixes the behavior to match the
# documentation so that it's actually useful.
[gcode_macro M204]
description: Implements max_accel as an actual maximum instead of a default.
rename_existing: M204.1
variable_runtime_max_accel: 0
gcode:
  {% set runtime_max_accel = printer["gcode_macro M204"].runtime_max_accel %}
  {% if runtime_max_accel %}
    {% set max_accel = runtime_max_accel %}
  {% else %}
    {% set max_accel = printer.configfile.settings.printer.max_accel %}
  {% endif %}

  {% set P = [params.P|default(0)|float, max_accel]|min %}
  {% set T = [params.T|default(0)|float, max_accel]|min %}
  {% set S = [params.S|default(0)|float, max_accel]|min %}

  ; Note: Doesn't support R (retract acceleration)
  {% if P and T %}
    M204.1 P{P} T{T}
  {% elif P %}
    M204.1 P{P}
  {% elif T %}
    M204.1 T{T}
  {% elif S %}
    M204.1 S{S}
  {% else %}
    M204.1 {rawparams}
  {% endif %}

[gcode_macro SET_VELOCITY_LIMIT]
description: Implements SET_VELOCITY_LIMIT ACCEL... as an actual limit.
rename_existing: BASE_SET_VELOCITY_LIMIT
gcode:
  {% if params.ACCEL %}
    SET_GCODE_VARIABLE MACRO=M204 VARIABLE=runtime_max_accel VALUE={params.ACCEL}
  {% endif %}
  BASE_SET_VELOCITY_LIMIT {rawparams}

[gcode_macro SET_COLOR_TEMP]
description: Sets LED colors based on a blackbody temperture.
gcode:
  {% set t = params.TEMP|default(5800)|float %}
  {% set l = params.BRIGHTNESS|default(1.0)|float %}

  # These formulas come from a spreadsheet I made based on some numbers I found
  # and I can't be bothered to say more than that. I normalized everything to
  # have red at a fixed value, with B reaching a maximum of 1 at 40,000K. These
  # formulas work well from 1000K to 10,000K.
  {% if t < 800 %}
    {% set r = l * 0.631 * t/800 %}
  {% else %}
    {% set r = l * 0.631 %}
  {% endif %}
  {% set g = l * (-28.0 * (t ** -0.52) + 0.90) %}
  {% set b = l * (-19.0 * (t ** -0.30) + 1.98) %}

  {% set g = [[g, 0.0] | max, 1.0] | min %}
  {% set b = [[b, 0.0] | max, 1.0] | min %}

  # This would convert to RGBW but neopixel white LEDs are a random cool color
  # temperature that would distort what I'm going for.
  # {% set w = [r, g, b] | min %}
  # {% set r = r - w %}
  # {% set g = g - w %}
  # {% set b = b - w %}

  # Assumes a gamma of 2.2 for Neopixels (approximately sRGB).
  _SET_WARMUP_LED RED={r**2.2} GREEN={g**2.2} BLUE={b**2.2} WHITE=0

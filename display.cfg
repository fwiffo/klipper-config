[display]
lcd_type: sh1106
i2c_mcu: display
i2c_bus: i2c1a
encoder_pins: ^display:PA3, ^display:PA4
click_pin: ^!display:PA1
kill_pin: ^!display:PA5
x_offset: 2
# Set the Vcomh value on SSD1306/SH1106 displays. This value is
# associated with a "smearing" effect on some OLED displays. The
# value may range from 0 to 63. Default is 0.
# Adjust this value if you get some vertical stripes on your display.
# (31 seems to be a good value.)
vcomh: 31
display_group: v0_display

[neopixel displayStatus]
pin: display:PA0
chain_count: 1
color_order: GRB
initial_RED: 0.02
initial_GREEN: 0.0
initial_BLUE: 0.05

# Support time-remaining in M73
[gcode_macro M73]
rename_existing: M73.1
variable_remaining: 0.0
gcode:
  # Time-remaining is passed as minutes.
  {% set P = params.P|default(0)|float %}
  {% set R = params.R|default(0)|float %}
  {% set seconds_remaining = R * 60 %}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=remaining VALUE={seconds_remaining}
  M73.1 P{P} R{R}

# ======================================================================
# Display layout
# ======================================================================
[display_data v0_display screensaver0]
position: 0, 0
text:
  {% if printer.idle_timeout.state == 'Idle' %}
    { render("_screensaver", param_line=0) }
  {% endif %}

[display_data v0_display screensaver1]
position: 1, 0
text:
  {% if printer.idle_timeout.state == 'Idle' %}
    { render("_screensaver", param_line=1) }
  {% endif %}

[display_data v0_display screensaver2]
position: 2, 0
text:
  {% if printer.idle_timeout.state == 'Idle' %}
    { render("_screensaver", param_line=2) }
  {% endif %}

[display_data v0_display screensaver3]
position: 3, 0
text:
  {% if printer.idle_timeout.state == 'Idle' %}
    { render("_screensaver", param_line=3) }
  {% endif %}

[display_data v0_display extruder]
position: 0, 0
text:
  {% if printer.idle_timeout.state != 'Idle' %}
    {% set active_extruder = printer.toolhead.extruder %}
    { render("_heater_temperature", param_heater_name=active_extruder) }
  {% endif %}

[display_data v0_display fan]
position: 0, 10
text:
  {% if printer.idle_timeout.state != 'Idle' %}
    { render("_fan_speed") }
  {% endif %}

[display_data v0_display print_progress]
position: 2, 0
text:
  {% if printer.idle_timeout.state != 'Idle' %}
    { "{:^10.0%}".format(printer.display_status.progress) }
  {% endif %}

[display_data v0_display progress_bar]
position: 2, 1 # Draw graphical progress bar after text is written
text:
  {% if printer.idle_timeout.state != 'Idle' %}
    { draw_progress_bar(2, 0, 10, printer.display_status.progress) }
  {% endif %}

[display_data v0_display printing_time]
position: 2, 10
text:
  {% if printer.idle_timeout.state != 'Idle' %}
    { "%6s" % (render("_printing_time").strip(),) }
  {% endif %}

[display_data v0_display print_status]
position: 3, 0
text:
  {% if printer.idle_timeout.state != 'Idle' %}
    { render("_print_status") }
  {% endif %}

[display_data v0_display nevermore_speed]
position: 1, 10
text:
  {% if printer.idle_timeout.state != 'Idle' %}
    { render("_nevermore_speed") }
  {% endif %}

[display_data v0_display bed_and_chamber]
position: 1, 0
text:
  {% if printer.idle_timeout.state != 'Idle' %}
    { render("_bed_and_chamber") }
  {% endif %}

# ======================================================================
# Display templates
# ======================================================================
[display_template _z_pos]
text:
  {% if "z" in printer.toolhead.homed_axes %}
    { "%6s" % ("Z%5.1f" % printer.toolhead.position.z) }
  {% endif %}

[display_template _print_status]
text:
  {% set message = printer.display_status.message %}
  {% set filename = printer.print_stats.filename %}
  {% if filename and printer.idle_timeout.printing_time %}
    {% set pause_frames = 2 %}
    {% set message_frames = 3 if message else 0 %}
    {% set width = 16 %}
    {% set scroll_frames = [filename|length - width, 0]|max %}
    {% set cycle = pause_frames + scroll_frames + message_frames %}
    {% set frame = printer.toolhead.estimated_print_time|int % cycle %}
    {% if frame < pause_frames %}
      { filename[:width] }
    {% elif frame < scroll_frames + pause_frames %}
      { filename[frame-pause_frames+1:frame-pause_frames+width+1] }
    {% elif message %}
      { message }
    {% endif %}
  {% elif message %}
    { message }
  {% else %}
    { printer.idle_timeout.state }.
  {% endif %}

[display_template _nevermore_speed]
text:
  {% if "fan_generic nevermore" in printer %}
    {% set speed = printer["fan_generic nevermore"].speed %}
    {% if speed %}
      {% set frame = printer.toolhead.estimated_print_time|int % 5 %}
      {% if frame == 0 %}
        ~voron~
      {% elif frame % 2 %}
        ~fan1~
      {% else %}
        ~fan2~
      {% endif %}
    {% else %}
      ~voron~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% else %}
    { render("_z_pos") }
  {% endif %}

[display_template _bed_and_chamber]
text:
  {% if printer.toolhead.estimated_print_time|int % 8 < 4 or "temperature_sensor chamber" not in printer %}
    { render("_heater_temperature", param_heater_name="heater_bed") }
  {% else %}
    {% set therm = printer["temperature_sensor chamber"] %}
    ~thermometer~
    { "%3.0f" % therm.temperature }
    ~degrees~
  {% endif %}

[display_template _printing_time]
text:
  {% set heat_soak = printer["gcode_macro _HEAT_SOAK"] %}
  {% if heat_soak.soak_time > 0 or heat_soak.soak_temp > 0 %}
    # Display heat soak time if requested.
    {% if heat_soak.soak_time > 0 %}
      {% if heat_soak.soak_start > 0 %}
        {% set display_time = heat_soak.soak_time * 60 - (printer.idle_timeout.printing_time - heat_soak.soak_start) %}
        {% set display_time = [display_time, 0]|max %}
      {% else %}
        {% set display_time = heat_soak.soak_time * 60 %}
      {% endif %}
    {% else %}
      {% set display_time = 0 %}
    {% endif %}

    # Display heat soak temperature if requested.
    {% if heat_soak.soak_temp > 0 %}
      {% set sensor = printer["temperature_sensor chamber"] %}
      {% if heat_soak.soak_start > 0 %}
        {% set display_temp = heat_soak.soak_temp - sensor.temperature %}
        {% set display_temp = [display_temp|round(0, 'ceil')|int, 0]|max %}
      {% else %}
        {% set display_temp = heat_soak.soak_temp %}
      {% endif %}
    {% else %}
      {% set display_temp = 0 %}
    {% endif %}

    {% set time_frame = printer.toolhead.estimated_print_time|int % 8 < 4 %}
    {% if heat_soak.soak_time > 0 and (time_frame or not heat_soak.soak_temp) %}
      # Heat soak is always <1 hour, so display as mm:ss
      { "%2d:%02d" % (display_time // 60, display_time % 60) }
    {% else %}
      { "~~%3.0f" % display_temp }~degrees~
    {% endif %}

  {% elif printer.idle_timeout.state == "Printing" %}
    # Display estimated time remaining while printing.
    {% set ptime = printer.print_stats.print_duration %}
    {% set rtime = printer["gcode_macro M73"].remaining %}
    {% set prog = printer.display_status.progress %}
    {% if not rtime and prog and prog >= 0.01 and ptime %}
      {% set rtime = (1-prog) * ptime / prog %}
    {% endif %}
    {% if rtime %}
      {% set display_time = rtime %}
    {% else %}
      {% set display_time = ptime %}
    {% endif %}
    # Time estimates have only minute resolution, so display as hh:mm
    { "%2d:%02d" % (display_time // (60 * 60), (display_time // 60) % 60) }

  {% else %}
    # Display the time of last print if idle.
    {% set display_time = printer["gcode_macro PRINT_END"].last_printing_time %}
    # Display as hh:mm for long prints, or mm:ss for short ones.
    {% if display_time > 10*60 %}
      { "%2d:%02d" % (display_time // (60 * 60), (display_time // 60) % 60) }
    {% else %}
      { "%2d:%02d" % (display_time // 60, display_time % 60) }
    {% endif %}
  {% endif %}

[display_template _screensaver]
param_line: 0
text:
  {% set time_frame = printer.toolhead.estimated_print_time|int %}
  {% set y = time_frame % 6 %}
  {% set y = y if y < 4 else 6 - y %}
  {% if y == param_line %}
    {% set x = time_frame % 28 %}
    {% set x = x if x < 15 else 28 - x %}
    ~~{ " " * x }~voron~
  {% endif %}

[display_glyph voron]
data:
  ................
  ................
  ................
  .....***...***..
  ....***...***...
  ...***...***....
  ..***...***.....
  .***...***......
  ......***...***.
  .....***...***..
  ....***...***...
  ...***...***....
  ..***...***.....
  ................
  ................
  ................

[display_glyph thermometer]
data:
  ................
  .......**.......
  ......*..*......
  ......*..*......
  ......*..*......
  ......*..*......
  ......*..*......
  ......*..*......
  ......****......
  ......****......
  .....******.....
  .....******.....
  .....******.....
  ......****......
  ................
  ................
